// Generated by gencpp from file my_action_server/demo2Goal.msg
// DO NOT EDIT!


#ifndef MY_ACTION_SERVER_MESSAGE_DEMO2GOAL_H
#define MY_ACTION_SERVER_MESSAGE_DEMO2GOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_action_server
{
template <class ContainerAllocator>
struct demo2Goal_
{
  typedef demo2Goal_<ContainerAllocator> Type;

  demo2Goal_()
    : input(0)
    , turn(0)
    , howLong(0)
    , finished(0)
    , halt(0)  {
    }
  demo2Goal_(const ContainerAllocator& _alloc)
    : input(0)
    , turn(0)
    , howLong(0)
    , finished(0)
    , halt(0)  {
  (void)_alloc;
    }



   typedef int32_t _input_type;
  _input_type input;

   typedef int32_t _turn_type;
  _turn_type turn;

   typedef int32_t _howLong_type;
  _howLong_type howLong;

   typedef int32_t _finished_type;
  _finished_type finished;

   typedef int32_t _halt_type;
  _halt_type halt;




  typedef boost::shared_ptr< ::my_action_server::demo2Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_action_server::demo2Goal_<ContainerAllocator> const> ConstPtr;

}; // struct demo2Goal_

typedef ::my_action_server::demo2Goal_<std::allocator<void> > demo2Goal;

typedef boost::shared_ptr< ::my_action_server::demo2Goal > demo2GoalPtr;
typedef boost::shared_ptr< ::my_action_server::demo2Goal const> demo2GoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_action_server::demo2Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_action_server::demo2Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_action_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib': ['/opt/ros/indigo/share/actionlib/cmake/../msg'], 'my_action_server': ['/home/user/ros_ws/devel/share/my_action_server/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'roscpp': ['/opt/ros/indigo/share/roscpp/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_action_server::demo2Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_action_server::demo2Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_action_server::demo2Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_action_server::demo2Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_action_server::demo2Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_action_server::demo2Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_action_server::demo2Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40408d2cd77bc50259d66ff9fa2a78b1";
  }

  static const char* value(const ::my_action_server::demo2Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40408d2cd77bc502ULL;
  static const uint64_t static_value2 = 0x59d66ff9fa2a78b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_action_server::demo2Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_action_server/demo2Goal";
  }

  static const char* value(const ::my_action_server::demo2Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_action_server::demo2Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
#the lines with the hash signs are merely comments\n\
#goal, result and feedback are defined by this fixed order, and separated by 3 hyphens\n\
int32 input\n\
int32 turn\n\
int32 howLong\n\
int32 finished\n\
int32 halt\n\
";
  }

  static const char* value(const ::my_action_server::demo2Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_action_server::demo2Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input);
      stream.next(m.turn);
      stream.next(m.howLong);
      stream.next(m.finished);
      stream.next(m.halt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct demo2Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_action_server::demo2Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_action_server::demo2Goal_<ContainerAllocator>& v)
  {
    s << indent << "input: ";
    Printer<int32_t>::stream(s, indent + "  ", v.input);
    s << indent << "turn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn);
    s << indent << "howLong: ";
    Printer<int32_t>::stream(s, indent + "  ", v.howLong);
    s << indent << "finished: ";
    Printer<int32_t>::stream(s, indent + "  ", v.finished);
    s << indent << "halt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.halt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ACTION_SERVER_MESSAGE_DEMO2GOAL_H
